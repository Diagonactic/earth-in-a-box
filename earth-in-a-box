#!/usr/bin/env zsh
die() { print -- $'\e[1;91mERROR\e[1;97m:\e[0;37m '"${1:-}"; exit "${2:-1}"; }
heading() { print -- $'\e[1;95m:: \e[0;37m '"$1"' \e[1;95m::\e[0;37m'; }
ifo() { print -- $'\e[1;94m -\e[0;37m' "$@" '\e[0;37m'; }

typeset -gr SCRIPT_DIR="${${(%):-%x/..}:A}" FULL_SCRIPT_NAME="${${(%):-%x}:A}"
typeset -gr SCRIPT_NAME="${FULL_SCRIPT_NAME##*/}"
typeset -gr LOCAL_DIR="${${:-${LOCAL_PREFIX}/..}:A}"
typeset -gr LOG_DIR="$LOCAL_DIR/log"
typeset -gr BIN_DIR="$LOCAL_DIR/bin"

[[ -e "$LOCAL_DIR" ]] || die "Couldn't find local prefix path; set LOCAL_PREFIX"
[[ -e "$LOG_DIR" ]] || mkdir -p "$LOG_DIR"
[[ -e "$LOG_DIR" ]] || die "Couldn't create log directory"

typeset -g IMAGE='earth-box' CONTAINER='earth-box'


print-help() {
  cat <<EOF  
  ${SCRIPT_NAME} - Attempts to configure and start Google Earth Pro in a Docker Container

  ./${SCRIPT_NAME} [command]

  Commands - Optional; Mostly for Maintenace and Debug
    build - Builds the docker image (pulling anything that must be pulled)

             Options:
                --run - When completed, start the container normally

    create - Creates and configures the docker container that will run Earth Pro
    
             Options:
                --run - When completed, start the container normally

    rebuild - A (sort of) rebuild.  Removes the image/container, recreates container from 
              whatever point it thinks should be restarted.

              Options:
                --run - When completed, start the container normally

    clean   - Does a (sort of) clean; removing the image/container, but not removing
              intermediate containers

              
  Location: $SCRIPT_DIR
  Full Path: $FULL_SCRIPT_NAME  
EOF
  exit 2
}

typeset -gi USERID=0 GROUPID=0
typeset -g USERNAME='' GROUPNAME=''
USERNAME="$(id -un)" || die "Failed to get user name via id -u"
GROUPNAME="$(id -gn)" || die "Failed to get group name via id -gn"
USERID="$(id -u)" || die "Failed to get user ID via id -u"
GROUPID="$(id -g)" || die "Failed to get user ID via id -g"

# Functions for getting things for parameters

output-dri-devices() {
  local -a cmd=( find /dev/dri -maxdepth 1 -type c )  
  if [[ "${1:-}" == "-v" ]]; then
    "${cmd[@]}" | while read DRI_DEV; do
      print -- -v
      print -- "$DRI_DEV:$DRI_DEV"
    done
  else
    "${cmd[@]}"
  fi  
}

# Container Functions
check-container-exists() { docker ps -a --format "{{.Names}}" | grep -Pq '^'"$CONTAINER"'$'; }
create-container() {
  local EARTHCFG="${HOME}/.googleearth"
  mkdir -p "$EARTHCFG"

  local -a parms=(
    create    
    --name "$CONTAINER"    
    --shm-size 128M
    -a STDIN -a STDOUT -a STDERR 
    -e "DISPLAY=unix$DISPLAY"
    -e "XAUTHORITY=$XAUTHORITY"
    -h "$HOSTNAME"    
    -u "$USERID:$GROUPID"
    -v "$XAUTHORITY:$XAUTHORITY"
    -v "${HOME}/.Xauthority:/home/${USER}/.Xauthority"
    -v /tmp/.X11-unix:/tmp/.X11-unix:rw
    -v "/etc/group:/etc/group:ro" 
    -v "/dev/shm:/dev/shm"    
    -v "$EARTHCFG:$EARTHCFG"
  )
  
  heading "Detected DRI Devices"

  output-dri-devices -v | while read ENTRY; do    
    parms+=( "$ENTRY" )
    if [[ "$ENTRY" == "-v" ]]; then continue; fi
    ifo "${ENTRY%%:*}"    
  done

  heading "Creating Container"
  ifo "Mapped $EARTHCFG to container, which will pick up configuration/logging and can coexist with a non-docker version (however, requires same version!)"
  ifo "docker ${parms[@]} $CONTAINER"
  docker "${parms[@]}" "$CONTAINER"
}

start-container() { QT_GRAPHICSSYSTEM="native" docker start -i "$CONTAINER"; }
remove-container() { docker rm --force "$CONTAINER"; }

# Image Functions
check-image-exists() { docker images --format "{{.Repository}}" | grep -Pq '^'"$IMAGE"'$'; }
build-image() { 
  
  local -a parms=(
    build
    -t "$IMAGE"
    --build-arg "USERID=$USERID"
    --build-arg "USERNAME=$USERNAME"
    --build-arg "GROUPID=$GROUPID"
    --build-arg "GROUPNAME=$GROUPNAME"
  )

  #print -l "${parms[@]}"
  docker "${parms[@]}" ./
}
rebuild-image() {
  remove-image
  build-image
}
remove-image() { docker rmi --force "$IMAGE"; }


cd "$SCRIPT_DIR"

# Uncomment to trap script exits -------------------------------------------------------

# trap cleanup SIGINT SIGTERM ERR EXIT
# cleanup() {
#   trap - SIGINT SIGTERM ERR EXIT
#   # script cleanup here
# }

# Uncomment to trap script exits -------------------------------------------------------



if (( $# == 0 )); then
  check-image-exists || {    
    ifo "Couldn't find image with the name $IMAGE; automatically creating image"
    build-image
  }  || die "Failed to build image"
  set +x
  check-container-exists || {
    ifo "Couldn't find a container with the name $CONTAINER; automatically creating container"
    create-container
  } || die "Failed to create container"

  start-container || die "Failed to start container $CONTAINER using image $IMAGE"
  exit 0  
elif (( $# >= 1 )); then
  typeset COMMAND="$1"; shift
  case "$COMMAND" in
    clean) 
              if check-image-exists; then
                heading "Removing $IMAGE image"
                remove-image || die "Failed to remove existing image"
              fi
              if check-container-exists; then
                heading "Removing $CONTAINER container"
                remove-container || die "Failed to remove container"
              fi  
    ;;
    create)
              if check-container-exists; then
                heading "Removing $CONTAINER container"
                remove-container || die "Failed to remove existing container"
              fi

              create-container

              if [[ "${1:-}" == "--run" ]]; then
                start-container
              fi
    ;;
    build)
              heading "Building $IMAGE image"
              build-image || die "Failed to build image"
              "${FULL_SCRIPT_NAME}" create

              if [[ "${1:-}" == "--run" ]]; then
                start-container
              fi              
    ;;
    rebuild)
              "${FULL_SCRIPT_NAME}" clean || die "Failed to clean docker components"
              "${FULL_SCRIPT_NAME}" build || die "Failed to clean docker components"              

              if [[ "${1:-}" == "--run" ]]; then
                start-container
              fi              
    ;;
    *build)
              
    ;;
    *)        
              print-help   
    ;;
  esac
fi
# docker run -d \
#    -v /tmp/.X11-unix:/tmp/.X11-unix \
#    -e DISPLAY=$DISPLAY \
#    -e XAUTHORITY="$XAUTHORITY" \
#    -h "${HOSTNAME}" \
#    -v /dev/dri/card0:/dev/dri/card0 \
#    -v "${XAUTHORITY}:${XAUTHORITY}" \
#    -v "${HOME}/.Xauthority:/home/${USER}/.Xauthority" \
#    --name  earth earth
