#!/usr/bin/env zsh

setopt EXTENDED_GLOB


#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------|         Interaction |
#                                                                                                             `---------------------'

ask-nicely() {
    print -n -- $'\e[1;97m'"$1"$'\e[0;37m? \e[1;90m[\e[1;4;92mY\e[0;1;90m/\e[0;91mn\e[0;90m]\e[0;37m ' > /dev/tty
    local RESULT;
    setopt localoptions extendedglob
    while read -k1 -s RESULT; do
        if [[ "$RESULT" == ([YyNn\n\e]) || -n "$RESULT" ]]; then
            print -n -- $'\e[5D'
            [[ "$RESULT" != ([Nn\e]) && "${(V)RESULT}" != "^[" ]] && {
                print -- $'\e[1;92mYes\e[0;90m]'; return 0
            } || {
                print -- $'\e[1;91mNo\e[0;90m] '; return 1
            }
        fi
    done
}

die() { print -- $'\e[1;91mERROR\e[1;97m:\e[0;37m '"${1:-}"; exit "${2:-1}"; }
heading() { print -- $'\e[1;95m:: \e[0;37m '"$1"' \e[1;95m::\e[0;37m'; }
ifo() { print -- $'\e[1;94m -\e[0;37m' "${(j:\n   :)@}" '\e[0;37m'; }

# =======================                                                                                     ,---------------------.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|      Initialization |
# ============                                                                                                `---------------------'


typeset -gr SCRIPT_DIR="${${(%):-%x/..}:A}" FULL_SCRIPT_NAME="${${(%):-%x}:A}"
typeset -gr SCRIPT_NAME="${FULL_SCRIPT_NAME##*/}"
typeset -gr LOCAL_DIR="${${:-${LOCAL_PREFIX}/..}:A}"
typeset -gr LOG_DIR="$LOCAL_DIR/log" BIN_DIR="$LOCAL_DIR/bin"

[[ -e "$LOCAL_DIR" ]] || die "Couldn't find local prefix path; set LOCAL_PREFIX"
[[ -e "$LOG_DIR" ]] || mkdir -p "$LOG_DIR"
[[ -e "$LOG_DIR" ]] || die "Couldn't create log directory"

typeset -gr DEFAULT_IMAGE='earth-box' DEFAULT_IMAGE_TAG='latest' DEFAULT_CONTAINER='earth-box' CONTAINER_DESC="Google Earth Pro"
typeset -g IMAGE="$DEFAULT_IMAGE" IMAGE_TAG="$DEFAULT_IMAGE_TAG" CONTAINER="$DEFAULT_CONTAINER"

local CONFIG_FILE="${SCRIPT_DIR}/config_${SCRIPT_NAME}.rc"
[[ ! -e "$CONFIG_FILE" ]] || source "$CONFIG_FILE"

typeset -gi USERID=0 GROUPID=0
typeset -g USERNAME='' GROUPNAME=''

USERNAME="$(id -un)" || die "Failed to get user name via id -u"
GROUPNAME="$(id -gn)" || die "Failed to get group name via id -gn"
USERID="$(id -u)" || die "Failed to get user ID via id -u"
GROUPID="$(id -g)" || die "Failed to get user ID via id -g"

typeset -A cli_options=( 
  cmd         run
  should_run  0
  full_clean  0
  is_internal 0
  only_clean_container 0
)

cd "$SCRIPT_DIR"

# Uncomment to trap script exits -------------------------------------------------------

# trap cleanup SIGINT SIGTERM ERR EXIT
# cleanup() {
#   trap - SIGINT SIGTERM ERR EXIT
#   # script cleanup here
# }

# Uncomment to trap script exits -------------------------------------------------------

#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------|        Command-line |
#                                                                                                             `---------------------'

print-help() {
  local BTAB="${(r:20:: :):-}"; local OTAB="${(r:12:: :):-}"  

  options() print    -- "$OTAB"$'Options:'
  bold() print -n -- $'\e[1;97m'"$1"$'\e[0;37m\e[0m'
  bright() print -n -- $'\e[0;97m'"$1"$'\e[0;37m\e[0m'
  dark() print -n -- $'\e[1;90m'"$1"$'\e[0;37m\e[0m'
  dim() print -n -- $'\e[0;96m'"$1"$'\e[0;37m\e[0m'
  bold-dash() { bold "$1"; dim ' - '; print -- "$2"; }
  bright-dash() { bright "$1"; dim ' - '; print -- "$2"; }
  pr-cmd() {
    print
    bold-dash "  ${(r:7:: :)1}" "$2";
    shift; shift
    while (( $# > 0 )); do {
      print -- "$BTAB$1"
    } always { shift; } done
    print
  }
  pr-opt() {
    bright-dash "  $OTAB${(r:15:: :)1}" "$2";
    shift; shift
    while (( $# > 0 )); do {
      print -- "$OTAB$BTAB$1"
    } always { shift; } done
  }  
  pr-copt() {
    while (( $# > 0 )); do {
      case "$1" in
        image)     pr-opt "-i,--image"     "Takes an optional parameter of the image name to use instead of $IMAGE. Leave the" \
                                           "parameter off to reset to $DEFAULT_IMAGE" ;;
        container) pr-opt "-c,--container" "Takes an optional parameter of the container name to use instead of $CONTAINER. Leave the" \
                                           "parameter off to reset to $DEFAULT_CONTAINER" ;;        
        tag)       pr-opt "-t,--tag"       "Takes an optional parameter of the image name to use instead of $IMAGE_TAG. Leave the" \
                                           "parameter off to reset to $DEFAULT_IMAGE_TAG" ;;
        run)       pr-opt "-r,--run"       "After $CONTAINER starts, run $CONTAINER_DESC" ;;
      esac
    } always { shift; } done
  }
  options-run() { 
    options    
    pr-opt '--run' "After $1, starts $CONTAINER_DESC";    
  }
  
  
  bold-dash "${SCRIPT_NAME}" "Attempts to configure and start $CONTAINER_DESC in a Docker Container"$'\n'
  print -n -- "Usage: "; 
  bold "${SCRIPT_NAME}"; print -- $' \e[0;36m[command]\e[0;34m\n'
  
  print -n -- "  For almost all users, simply running "; bright "${SCRIPT_NAME} "; print -- $'\e[0;34m'"is all that is needed.  For development, "
  print    -- "    maintenance, and removal, the following optional commands can be used."$'\e[0m\n'
  print    -- "  The docker container is built, created and run using the user account that the script executes as,"
  print    -- "    therefore, the user must be a member of the 'docker' group and should not be 'root'"$'\e[0m\n'
  print    -- $'Commands:\n'
  pr-cmd build "Builds the $CONTAINER_DESC with the name '$IMAGE:$IMAGE_TAG' using docker build, removes" \
               "any existing '$CONTAINER' if one exists, and creates a new one"
  options-run building/creating
  pr-copt image tag container
  
  pr-cmd clean  "Cleans docker deployment of $CONTAINER_DESC by remocing container named '$CONTAINER'" \
                "and image named '$IMAGE:$IMAGE_TAG'"
  options
  pr-opt -c     "Remove the container, only"
  pr-cmd create "Creates the $CONTAINER_DESC container '$CONTAINER' from '$IMAGE:$IMAGE_TAG', " \
                "creating it if it doesn't exist"                 
  options-run creating
  pr-copt container
  
  pr-cmd rebuild "Cleans and builds $CONTAINER_DESC '$IMAGE:$IMAGE_TAG' using docker build, skipping" \
                 "the build cache and pulling images if they are out of date."
  options-run rebuilding/creating

  pr-cmd config "Creates a config_${SCRIPT_NAME}.rc file in directory containing this script which"
  options
  pr-copt image tag container
  
  (( $# == 0 )) || die "$1"
  exit 2
}

parse-cli() {
  if (( $# == 0 )); then
    cli_options[should_run]=1
    return 0
  fi
  
  local cmd="$1"; cli_options[cmd]=$1; shift

  (( $# > 0 )) || return 0

  setopt EXTENDED_GLOB
  () {
    is-cmd() {      
      while (( $# > 0 )); do {        
        [[ "$1" == "$cmd" ]] && return 0        
      } always { shift; } done      
      return 1
    }
    requires-cmd() {
      local ARG="$1"; shift      
      is-cmd "$@" || print-help "\e[1;91m$ARG\e[0;37m is not a recognized option for command '$cmd'"
    }
    while (( $# > 0 )); do {
      
      case "$1" in
        
        -r|--run)   requires-cmd $1 create build rebuild
                    cli_options[should_run]=1
        ;;
        
        -f|--full)  requires-cmd $1 clean build rebuild                      
                    cli_options[full_clean]=1
        ;;
        
        --rebuild)  requires-cmd $1 rebuild        
                    cli_options[is_internal]=1
        ;;
        
        -c)         requires-cmd $1 build create config clean
                    is-cmd clean && cli_options[only_clean_container]=1 || {
                      [[ "${2:-}" == "-"* || -z "${2:-}" ]] && CONTAINER="$DEFAULT_CONTAINER" \
                        || { CONTAINER="$2"; shift; }         # Argument for parameter
                    }
        ;;
        -i)         requires-cmd $1 build config
                    [[ "${2:-}" == "-"* || -z "${2:-}" ]] && IMAGE="$DEFAULT_IMAGE" \
                      || { IMAGE="$2"; shift; }     
        ;;
        
        -t)         requires-cmd $1 build config
                    [[ "${2:-}" == "-"* || -z "${2:-}" ]] && IMAGE_TAG="$DEFAULT_IMAGE_TAG" \
                      || { IMAGE_TAG="$2"; shift } 
        ;;
      esac
      
    } always { shift }; done
  } ${${${(z)${${(qqq)argv[@]}:-}/#(#m)\"-[^-]?*/${${(@)${(s::)MATCH:1:-1}:#-}//(#m)?/-$MATCH}}##\"}%%\"}
  # yes, that's my own.  It's the world's ugliest expansion in order to support -xyz or -x -y -z.  If Regex gives you two problems, how many problems do I have, now?
}

#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------|    Util/Environment |
#                                                                                                             `---------------------'

system-has() > /dev/null 2>&1 { which "$1"; }
get-dri-devfs() { find /dev/dri -maxdepth 1 -type c; }

dri-create-parms() {
  local -a cmd=( get-dri-devfs )  
  "${cmd[@]}" | while read DRI_DEV; do
    print -- -v
    print -- "$DRI_DEV:$DRI_DEV"
    if [[ "$DRI_DEV" == *"/card"* ]]; then
      print -- --device
      print -- "$DRI_DEV"
    fi
  done
}


#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------| Container Functions |
#                                                                                                             `---------------------'

check-container-exists() { docker ps -a --format "{{.Names}}" | grep -Pq '^'"$CONTAINER"'$'; }
start-container() {   
  docker start -i "$CONTAINER"; 
}

create-container() {
  local EARTHCFG="${HOME}/.googleearth"
  mkdir -p "$EARTHCFG"

  local -a parms=(
    create    
    --name "$CONTAINER"    
    --ipc host
    -e "DISPLAY" -e "XAUTHORITY"
    -h "$HOSTNAME"
    -w "$HOME"
    -u "$USERID:$GROUPID"
    -v "$XAUTHORITY:$XAUTHORITY"
    -v "${HOME}/.Xauthority:/home/${USER}/.Xauthority"
    -v /tmp/.X11-unix:/tmp/.X11-unix:rw
    -v "/etc/group:/etc/group:ro" 
    -v "$EARTHCFG:$EARTHCFG"
  )
  
  [[ -e "/etc/sudoers.d" ]] || parms+=( -v "/etc/sudoers.d:/etc/sudoers.d:ro" )
  
  heading "Detected DRI Devices"

  local ENTRY=,LINE=
  local -Ua dri_devs
  dri-create-parms | while read ENTRY; do    
    parms+=( "$ENTRY" )
    if [[ "$ENTRY" == "-"* ]]; then continue; fi    
    dri_devs+=( "${ENTRY%:*}" )
  done

  for dridev in "${dri_devs[@]}"; do
    print -- "\e[1;93m  ${dridev}\e[0m"
  done
  
  ifo "Mapped $EARTHCFG to container, which will pick up configuration/logging" \
      "and can coexist with a non-docker version (however, requires same version!)"
  
  ifo "docker ${(j: :)parms[@]} $CONTAINER"
  docker "${parms[@]}" "$CONTAINER" || die "Failed to create container"

  if [[ "${cli_options[should_run]}" -eq 1 ]]; then
    start-container
  fi
}

remove-container() { docker rm --force "$CONTAINER"; }
remove-container-if-exists() {
  if check-container-exists; then            
    ifo "Removing '$CONTAINER' container"
    remove-container > /dev/null || die "Failed to remove container"
  fi
}

#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------|     Image Functions |
#                                                                                                             `---------------------'
check-image-exists() { docker images --format "{{.Repository}}" | grep -Pq '^'"$IMAGE"'$'; }
remove-image() docker rmi --force "$IMAGE"

build-image() { 
  
  local -a parms=(
    build
    -t "$IMAGE:$IMAGE_TAG"
    --build-arg "USERID=$USERID"
    --build-arg "USERNAME=$USERNAME"
    --build-arg "GROUPID=$GROUPID"
    --build-arg "GROUPNAME=$GROUPNAME"
  )
  
  if [[ "${cli_options[full_clean]}" -eq 1 ]]; then
    parms+=( --no-cache --pull )
  fi

  #print -l "${parms[@]}"
  docker "${parms[@]}" ./
}


#                                                                                                             ,---------------------.
# ------------------------------------------------------------------------------------------------------------|   Command Redirects |
#                                                                                                             `---------------------'
docker() command docker "$@"
earth-in-a-box() {
  if [[ "$1" == "clean" ]]; then
    "${FULL_SCRIPT_NAME}" "$@" "${recurse_parms[@]:#--run}"
  else    
    "${FULL_SCRIPT_NAME}" "$@" "${recurse_parms[@]}"
  fi
}



# =======================                                                                         ------------,---------------------.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|              Script |
# ============                                                                         -----------------------`---------------------'

parse-cli "$@"

# -- `earth-in-a-box` uses this to re-append --run for recursive calls
typeset -a recurse_parms=( )
[[ "${cli_options[should_run]}" -eq 0 ]] || recurse_parms+=( --run )


# ------------------------------------------------------------------------------------------------------------ Confirm Pre-requisites

if ! system-has docker; then
  if system-has zypper && system-has sudo; then
    if ask-nicely "Docker does not appear to be installed, shall I try to install it?"; then
      sudo zypper in -y docker    
    else
      die "Aborted"
    fi
  else
    print-help "Docker was not found"
  fi
fi

docker ps > /dev/null 2>&1 \
  || print-help "Cannot execute 'docker ps'; you likely are not a member of the appropriate security group (docker)"

# ------------------------------------------------------------------------------------------------------------------ Execute Commands

case "${cli_options[cmd]}" in

  run)  check-image-exists || {          
          ifo "The '$IMAGE' image did not exist; it is being built -- nothing is changing on your system, only the docker container"
          earth-in-a-box build || die "Failed to create docker image"
          exit 0
        }  
  
        check-container-exists || {          
          ifo "The '$CONTAINER' image did not exist; it is being built -- nothing is changing on your system, only the docker container"
          earth-in-a-box create || die "Failed to create docker container"
          exit 0
        } || die "Failed to create container"

        start-container
  ;;

  clean)    heading "Inspecting Environment for Cleaning"
            remove-container-if-exists
            if [[ "${cli_options[only_clean_container]}" -eq 0 ]]; then
              if check-image-exists; then
                ifo "Removing '$IMAGE' image"
                remove-image > /dev/null || die "Failed to remove existing image"
              fi
            fi  
  ;;

  build)    heading "Building $IMAGE image"            
            build-image
            
            earth-in-a-box create || die "Failed to create docker container"
  ;;
  
  create)   earth-in-a-box clean -c
            heading "Creating $CONTAINER container"
            
            
            create-container
  ;;

  rebuild)  earth-in-a-box clean                  || die "Failed to clean docker components"            
            earth-in-a-box build --rebuild --full || die "Failed to rebuild docker components"
  ;;

  config)   () {
              print -- "IMAGE='$IMAGE'"
              print -- "CONTAINER='$CONTAINER'"
              print -- "IMAGE_TAG='$IMAGE_TAG'"
            } > "$CONFIG_FILE"
            ifo "Set image to '$IMAGE:$IMAGE_TAG'"
            ifo "Set container to '$CONTAINER'"            
  ;;

  *) print-help
  ;;

esac